export const abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "token",
        type: "address",
      },
      { internalType: "address", name: "account", type: "address" },
      { internalType: "address", name: "morpho", type: "address" },
      {
        internalType: "contract IPermit2",
        name: "permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "generalAdapter1",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isWrappedBackedToken",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isErc20Permissioned",
        type: "bool",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              {
                internalType: "uint256",
                name: "morpho",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "permit2",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "generalAdapter1",
                type: "uint256",
              },
            ],
            internalType: "struct ERC20Allowances",
            name: "erc20Allowances",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint160",
                name: "amount",
                type: "uint160",
              },
              {
                internalType: "uint48",
                name: "expiration",
                type: "uint48",
              },
              { internalType: "uint48", name: "nonce", type: "uint48" },
            ],
            internalType: "struct Permit2Allowance",
            name: "permit2BundlerAllowance",
            type: "tuple",
          },
          { internalType: "bool", name: "isErc2612", type: "bool" },
          {
            internalType: "uint256",
            name: "erc2612Nonce",
            type: "uint256",
          },
          {
            internalType: "enum OptionalBoolean",
            name: "canTransfer",
            type: "uint8",
          },
        ],
        internalType: "struct HoldingResponse",
        name: "res",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x6080806040523460155761077a908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c634755ff3e14610024575f80fd5b346104b05760e03660031901126104b0576004356001600160a01b03811681036104b057602435906001600160a01b03821682036104b057604435916001600160a01b03831683036104b057606435926001600160a01b03841684036104b057608435926001600160a01b03841684036104b05760a43580151581036104b05760c43580151581036104b0576101406040525f60805260a0966100c56106ef565b885260c0946100d26106ef565b86525f60e0818152610100829052610120919091526040516370a0823160e01b81526001600160a01b038981166004830152919991602090829060249082908b165afa9081156105c1575f91610669575b50608052604051636eb1769f60e11b81526001600160a01b03808a166004830152909216602483015260208280604481015b03816001600160a01b038a165afa9182156105c1575f92610635575b50604051636eb1769f60e11b81526001600160a01b0389811660048301528416602482015291602083806044810103816001600160a01b038b165afa80156105c1575f90610601575b604051636eb1769f60e11b81526001600160a01b03808c16600483015284166024820152935060208480604481015b03816001600160a01b038c165afa9081156105c1575f916105cc575b6060945060405192610216846106b1565b83526020830152604080830191909152908b525163927da10560e01b81526001600160a01b038981166004830152878116602483015291821660448201529283916064918391165afa9081156105c1575f9161054c575b508452604051623f675f60e91b81526001600160a01b0386811660048301526020908290602490829088165afa5f9181610518575b5061050a575b50604051624b894760e91b81526001600160a01b0386811660048301526020908290602490829088165afa5f91816104e9575b506104c65750156104bc576102f460015b610120610738565b61038e575b5065ffffffffffff91506040908180519560805187525180516020880152602081015182880152015160608601525160018060a01b0381511660808601528260208201511660a086015201511660c083015251151560e0820152608080015161010082015260a06080015190600382101561037a5761014091610120820152f35b634e487b7160e01b5f52602160045260245ffd5b5f6101205260405163650369bf60e01b815290602090829060049082906001600160a01b03165afa5f918161046a575b509065ffffffffffff93604093926103d9575b5050906102f9565b8351633af32abf60e01b81526001600160a01b0391821660048201529160209183916024918391165afa5f9181610439575b50610417575b806103d1565b1561042f576104296002610120610738565b5f610411565b61042960016102ec565b61045c91925060203d602011610463575b61045481836106cd565b810190610720565b905f61040b565b503d61044a565b909291506020813d6020116104b4575b81610487602093836106cd565b810103126104b05751916001600160a01b03831683036104b05790919065ffffffffffff6103be565b5f80fd5b3d915061047a565b6102f460026102ec565b1590506104df576104da6002610120610738565b6102f4565b6104da60016102ec565b61050391925060203d6020116104635761045481836106cd565b905f6102db565b60018752610100525f6102a8565b9091506020813d602011610544575b81610534602093836106cd565b810103126104b05751905f6102a2565b3d9150610527565b90506060813d6060116105b9575b81610567606093836106cd565b810103126104b0576040519061057c826106b1565b80516001600160a01b03811681036104b0576105ae9160409184526105a36020820161070d565b60208501520161070d565b60408201525f61026d565b3d915061055a565b6040513d5f823e3d90fd5b90506020843d6020116105f9575b816105e7602093836106cd565b810103126104b0576060935190610205565b3d91506105da565b506020833d60201161062d575b8161061b602093836106cd565b810103126104b0576101e992516101ba565b3d915061060e565b9091506020813d602011610661575b81610651602093836106cd565b810103126104b05751905f610171565b3d9150610644565b90506020813d602011610695575b81610684602093836106cd565b810103126104b05751610155610123565b3d9150610677565b634e487b7160e01b5f52604160045260245ffd5b6060810190811067ffffffffffffffff82111761069d57604052565b90601f8019910116810190811067ffffffffffffffff82111761069d57604052565b604051906106fc826106b1565b5f6040838281528260208201520152565b519065ffffffffffff821682036104b057565b908160209103126104b0575180151581036104b05790565b600382101561037a575256fea2646970667358221220be21ea669a9321ae5df187895f9c1db309e495cb210c0ad5f5474ec0a7be853b64736f6c634300081b0033";
