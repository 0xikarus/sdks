export const abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "token",
        type: "address",
      },
      { internalType: "address", name: "account", type: "address" },
      { internalType: "address", name: "morpho", type: "address" },
      {
        internalType: "contract IPermit2",
        name: "permit2",
        type: "address",
      },
      { internalType: "address", name: "bundler3", type: "address" },
      {
        internalType: "address",
        name: "generalAdapter1",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isWrappedBackedToken",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isErc20Permissioned",
        type: "bool",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              {
                internalType: "uint256",
                name: "morpho",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "permit2",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "generalAdapter1",
                type: "uint256",
              },
            ],
            internalType: "struct ERC20Allowances",
            name: "erc20Allowances",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint160",
                    name: "amount",
                    type: "uint160",
                  },
                  {
                    internalType: "uint48",
                    name: "expiration",
                    type: "uint48",
                  },
                  {
                    internalType: "uint48",
                    name: "nonce",
                    type: "uint48",
                  },
                ],
                internalType: "struct Permit2Allowance",
                name: "morpho",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint160",
                    name: "amount",
                    type: "uint160",
                  },
                  {
                    internalType: "uint48",
                    name: "expiration",
                    type: "uint48",
                  },
                  {
                    internalType: "uint48",
                    name: "nonce",
                    type: "uint48",
                  },
                ],
                internalType: "struct Permit2Allowance",
                name: "bundler3",
                type: "tuple",
              },
            ],
            internalType: "struct Permit2Allowances",
            name: "permit2Allowances",
            type: "tuple",
          },
          { internalType: "bool", name: "isErc2612", type: "bool" },
          {
            internalType: "uint256",
            name: "erc2612Nonce",
            type: "uint256",
          },
          {
            internalType: "enum OptionalBoolean",
            name: "canTransfer",
            type: "uint8",
          },
        ],
        internalType: "struct HoldingResponse",
        name: "res",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x608080604052346015576108bc908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c6308e7fcc114610024575f80fd5b3461059857610100366003190112610598576004356001600160a01b0381168103610598576024356001600160a01b038116810361059857604435906001600160a01b0382168203610598576064356001600160a01b038116810361059857608435936001600160a01b03851685036105985760a4356001600160a01b03811681036105985760c4359081151582036105985760e435908115158203610598576101406040525f60805260a0976100d96107df565b895260405160c096906100eb81610785565b6100f36107df565b81526100fd6107df565b602082015287526060608001985f8a525f60808001525f60a060800152604051936370a0823160e01b855260018060a01b038a16600486015260208560248160018060a01b038c165afa8015610663575f9061073d575b608052604051636eb1769f60e11b81526001600160a01b03808c16600483015283166024820152945060208580604481015b03816001600160a01b038c165afa948515610663575f95610707575b50604051636eb1769f60e11b81526001600160a01b03808c166004830152841660248201529060208280604481015b03816001600160a01b038d165afa918215610663575f926106d2575b50604051636eb1769f60e11b81526001600160a01b03808d166004830152909116602482015290602082806044810103816001600160a01b038d165afa918215610663575f92610696575b509460609291610299966040519261024f846107a1565b83526020830152604080830191909152908d525163927da10560e01b81526001600160a01b038b811660048301528981166024830152909116604482015293849081906064820190565b03816001600160a01b0385165afa928315610663575f9361066e575b5060405163927da10560e01b81526001600160a01b03808a1660048301528781166024830152909216604483015260609082908180606481015b03916001600160a01b03165afa908115610663575f91610634575b506040519161031883610785565b825260208201528452604051623f675f60e91b815260018060a01b038616600482015260208160248160018060a01b0388165afa5f9181610600575b506105f2575b50604051624b894760e91b81526001600160a01b0386811660048301526020908290602490829088165afa5f91816105d1575b506105ae5750156105a4576103a660015b61012061087a565b610480575b5061043f915060209060408051956080518752518051848801528381015182880152015160608601525161040960808601825165ffffffffffff6040809260018060a01b038151168552826020820151166020860152015116910152565b015180516001600160a01b031660e0850152602081015165ffffffffffff90811661010086015260409091015116610120840152565b511515610140820152610100516101608201526101205190600382101561046c576101a091610180820152f35b634e487b7160e01b5f52602160045260245ffd5b5f6101205260405163650369bf60e01b815290602090829060049082906001600160a01b03165afa5f9181610556575b509061043f93602093926104c7575b5050906103ab565b604051633af32abf60e01b81526001600160a01b03918216600482015291849183916024918391165afa5f9181610527575b50610505575b806104bf565b1561051d57610517600261012061087a565b5f6104ff565b610517600161039e565b610548919250843d861161054f575b61054081836107bd565b810190610862565b905f6104f9565b503d610536565b909291506020813d60201161059c575b81610573602093836107bd565b810103126105985751916001600160a01b03831683036105985790919061043f6104b0565b5f80fd5b3d9150610566565b6103a6600261039e565b1590506105c7576105c2600261012061087a565b6103a6565b6105c2600161039e565b6105eb91925060203d60201161054f5761054081836107bd565b905f61038d565b60018752610100525f61035a565b9091506020813d60201161062c575b8161061c602093836107bd565b810103126105985751905f610354565b3d915061060f565b610656915060603d60601161065c575b61064e81836107bd565b810190610810565b5f61030a565b503d610644565b6040513d5f823e3d90fd5b60609193509161068d6102ef93833d851161065c5761064e81836107bd565b939150916102b5565b929150946020833d6020116106ca575b816106b3602093836107bd565b810103126105985791519194909190610299610238565b3d91506106a6565b91506020823d6020116106ff575b816106ed602093836107bd565b810103126105985790519060206101ed565b3d91506106e0565b9094506020813d602011610735575b81610723602093836107bd565b810103126105985751936101d16101a2565b3d9150610716565b506020853d602011610769575b81610757602093836107bd565b81010312610598576101869451610154565b3d915061074a565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761077157604052565b6060810190811067ffffffffffffffff82111761077157604052565b90601f8019910116810190811067ffffffffffffffff82111761077157604052565b604051906107ec826107a1565b5f6040838281528260208201520152565b519065ffffffffffff8216820361059857565b908160609103126105985760405190610828826107a1565b80516001600160a01b03811681036105985761085a91604091845261084f602082016107fd565b6020850152016107fd565b604082015290565b90816020910312610598575180151581036105985790565b600382101561046c575256fea2646970667358221220ebc7facce8af0d359e8c5b4110f378a0d03f8bba5c82ac4a13adb46b1b2f0e1d64736f6c634300081b0033";
