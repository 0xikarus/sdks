export const abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "token",
        type: "address",
      },
      { internalType: "address", name: "account", type: "address" },
      { internalType: "address", name: "morpho", type: "address" },
      {
        internalType: "contract IPermit2",
        name: "permit2",
        type: "address",
      },
      { internalType: "address", name: "bundler", type: "address" },
      {
        internalType: "bool",
        name: "isWrappedBackedToken",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isErc20Permissioned",
        type: "bool",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              {
                internalType: "uint256",
                name: "morpho",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "permit2",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "bundler",
                type: "uint256",
              },
            ],
            internalType: "struct ERC20Allowances",
            name: "erc20Allowances",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint160",
                    name: "amount",
                    type: "uint160",
                  },
                  {
                    internalType: "uint48",
                    name: "expiration",
                    type: "uint48",
                  },
                  {
                    internalType: "uint48",
                    name: "nonce",
                    type: "uint48",
                  },
                ],
                internalType: "struct Permit2Allowance",
                name: "morpho",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint160",
                    name: "amount",
                    type: "uint160",
                  },
                  {
                    internalType: "uint48",
                    name: "expiration",
                    type: "uint48",
                  },
                  {
                    internalType: "uint48",
                    name: "nonce",
                    type: "uint48",
                  },
                ],
                internalType: "struct Permit2Allowance",
                name: "bundler",
                type: "tuple",
              },
            ],
            internalType: "struct Permit2Allowances",
            name: "permit2Allowances",
            type: "tuple",
          },
          { internalType: "bool", name: "isErc2612", type: "bool" },
          {
            internalType: "uint256",
            name: "erc2612Nonce",
            type: "uint256",
          },
          { internalType: "bool", name: "canTransfer", type: "bool" },
        ],
        internalType: "struct HoldingResponse",
        name: "res",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x60808060405234601557610847908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c634755ff3e14610024575f80fd5b346105505760e0366003190112610550576004356001600160a01b038116810361055057602435906001600160a01b0382168203610550576044356001600160a01b038116810361055057606435906001600160a01b038216820361055057608435906001600160a01b03821682036105505760a4359384151585036105505760c435948515158603610550576101406040525f60805260a0956100c6610776565b875260405160c094906100d88161071c565b6100e0610776565b81526100ea610776565b602082015285526060608001955f875260808001975f89525f60a060800152604051926370a0823160e01b845260018060a01b038c16600485015260208460248160018060a01b038b165afa80156105f8575f906106d4575b608052604051636eb1769f60e11b81526001600160a01b03808e16600483015282166024820152935060208480604481015b03816001600160a01b038b165afa9384156105f8575f946106a0575b50604051636eb1769f60e11b81526001600160a01b03808e16600483015283166024820152602081806044810103816001600160a01b038c165afa80156105f8578d85925f92610667575b50604051636eb1769f60e11b81526001600160a01b0391821660048201529216602483015260208280604481015b03816001600160a01b038d165afa9182156105f8575f9261062b575b509460609291610287966040519261023d84610738565b83526020830152604080830191909152908d525163927da10560e01b81526001600160a01b03808f1660048301528981166024830152909116604482015293849081906064820190565b03816001600160a01b0385165afa9283156105f8575f93610603575b5060405163927da10560e01b81526001600160a01b03808d1660048301528781166024830152909216604483015260609082908180606481015b03916001600160a01b03165afa9081156105f8575f916105c9575b50604051916103068361071c565b825260208201528452604051623f675f60e91b815260018060a01b038916600482015260208160248160018060a01b0388165afa5f9181610595575b50610589575b50604051624b894760e91b81526001600160a01b0389811660048301526020908290602490829088165afa5f9181610568575b5061055c575015610120525b610441575b506101a094506020610423916040805196608051885251805184890152838101518289015201516060870152516103ed60808701825165ffffffffffff6040809260018060a01b038151168552826020820151166020860152015116910152565b015180516001600160a01b031660e0860152602081015165ffffffffffff90811661010087015260409091015116610120850152565b51151561014083015251610160820152610120511515610180820152f35b5f6101205260405163650369bf60e01b815290602090829060049082906001600160a01b03165afa955f9187610510575b5091602091610423936101a09861048d575b5050915061038c565b604051633af32abf60e01b81526001600160a01b03918216600482015291849183916024918391165afa5f91816104e1575b506104cb575b80610484565b6104d6575b5f6104c5565b6001610120526104d0565b610502919250843d8611610509575b6104fa8183610754565b8101906107f9565b905f6104bf565b503d6104f0565b909291506020813d602011610554575b8161052d60209383610754565b810103126105505751906001600160a01b038216820361055057916101a0610472565b5f80fd5b3d9150610520565b15156101205250610387565b61058291925060203d602011610509576104fa8183610754565b905f61037b565b6001865286525f610348565b9091506020813d6020116105c1575b816105b160209383610754565b810103126105505751905f610342565b3d91506105a4565b6105eb915060603d6060116105f1575b6105e38183610754565b8101906107a7565b5f6102f8565b503d6105d9565b6040513d5f823e3d90fd5b6060919350916106226102dd93833d85116105f1576105e38183610754565b939150916102a3565b929150946020833d60201161065f575b8161064860209383610754565b810103126105505791519194909190610287610226565b3d915061063b565b925050506020813d602011610698575b8161068460209383610754565b81010312610550575183908d61020a6101dc565b3d9150610677565b9093506020813d6020116106cc575b816106bc60209383610754565b810103126105505751925f610191565b3d91506106af565b506020843d602011610700575b816106ee60209383610754565b81010312610550576101759351610143565b3d91506106e1565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761070857604052565b6060810190811067ffffffffffffffff82111761070857604052565b90601f8019910116810190811067ffffffffffffffff82111761070857604052565b6040519061078382610738565b5f6040838281528260208201520152565b519065ffffffffffff8216820361055057565b9081606091031261055057604051906107bf82610738565b80516001600160a01b0381168103610550576107f19160409184526107e660208201610794565b602085015201610794565b604082015290565b9081602091031261055057518015158103610550579056fea26469706673582212206d8c271ea06216e8c3e50cd5e213f966a023c9519f95a3a2026deb2a9e1f5b3864736f6c634300081b0033";
