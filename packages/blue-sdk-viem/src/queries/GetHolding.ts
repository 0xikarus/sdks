export const abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Permit",
        name: "token",
        type: "address",
      },
      { internalType: "address", name: "account", type: "address" },
      { internalType: "address", name: "morpho", type: "address" },
      {
        internalType: "contract IPermit2",
        name: "permit2",
        type: "address",
      },
      { internalType: "address", name: "bundler3", type: "address" },
      {
        internalType: "address",
        name: "generalAdapter1",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isWrappedBackedToken",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isErc20Permissioned",
        type: "bool",
      },
    ],
    name: "query",
    outputs: [
      {
        components: [
          { internalType: "uint256", name: "balance", type: "uint256" },
          {
            components: [
              {
                internalType: "uint256",
                name: "morpho",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "permit2",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "generalAdapter1",
                type: "uint256",
              },
            ],
            internalType: "struct ERC20Allowances",
            name: "erc20Allowances",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint160",
                name: "amount",
                type: "uint160",
              },
              {
                internalType: "uint48",
                name: "expiration",
                type: "uint48",
              },
              { internalType: "uint48", name: "nonce", type: "uint48" },
            ],
            internalType: "struct Permit2Allowance",
            name: "permit2BundlerAllowance",
            type: "tuple",
          },
          { internalType: "bool", name: "isErc2612", type: "bool" },
          {
            internalType: "uint256",
            name: "erc2612Nonce",
            type: "uint256",
          },
          {
            internalType: "enum OptionalBoolean",
            name: "canTransfer",
            type: "uint8",
          },
        ],
        internalType: "struct HoldingResponse",
        name: "res",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export const code =
  "0x60808060405234601557610790908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c6308e7fcc114610024575f80fd5b346104c7576101003660031901126104c7576004356001600160a01b03811681036104c7576024356001600160a01b03811681036104c757604435906001600160a01b03821682036104c757606435926001600160a01b03841684036104c757608435906001600160a01b03821682036104c75760a435946001600160a01b03861686036104c75760c4359081151582036104c75760e4359081151582036104c7576101406040525f60805260a0976100db610705565b895260c0956100e8610705565b87525f60e0818152610100829052610120919091526040516370a0823160e01b81526001600160a01b038a81166004830152919a91602090829060249082908c165afa9081156105d8575f9161067f575b50608052604051636eb1769f60e11b81526001600160a01b03808b166004830152909116602482015260208180604481015b03816001600160a01b038b165afa9081156105d8575f9161064d575b50604051636eb1769f60e11b81526001600160a01b03808b1660048301528516602482015292602084806044810103816001600160a01b038c165afa9384156105d8575f94610618575b50604051636eb1769f60e11b81526001600160a01b03808c166004830152909116602482015292602084806044810103816001600160a01b038c165afa9081156105d8575f916105e3575b606094506040519261022d846106c7565b83526020830152604080830191909152908b525163927da10560e01b81526001600160a01b038981166004830152878116602483015291821660448201529283916064918391165afa9081156105d8575f91610563575b508452604051623f675f60e91b81526001600160a01b0386811660048301526020908290602490829088165afa5f918161052f575b50610521575b50604051624b894760e91b81526001600160a01b0386811660048301526020908290602490829088165afa5f9181610500575b506104dd5750156104d35761030b60015b61012061074e565b6103a5575b5065ffffffffffff91506040908180519560805187525180516020880152602081015182880152015160608601525160018060a01b0381511660808601528260208201511660a086015201511660c083015251151560e0820152608080015161010082015260a0608001519060038210156103915761014091610120820152f35b634e487b7160e01b5f52602160045260245ffd5b5f6101205260405163650369bf60e01b815290602090829060049082906001600160a01b03165afa5f9181610481575b509065ffffffffffff93604093926103f0575b505090610310565b8351633af32abf60e01b81526001600160a01b0391821660048201529160209183916024918391165afa5f9181610450575b5061042e575b806103e8565b1561044657610440600261012061074e565b5f610428565b6104406001610303565b61047391925060203d60201161047a575b61046b81836106e3565b810190610736565b905f610422565b503d610461565b909291506020813d6020116104cb575b8161049e602093836106e3565b810103126104c75751916001600160a01b03831683036104c75790919065ffffffffffff6103d5565b5f80fd5b3d9150610491565b61030b6002610303565b1590506104f6576104f1600261012061074e565b61030b565b6104f16001610303565b61051a91925060203d60201161047a5761046b81836106e3565b905f6102f2565b60018752610100525f6102bf565b9091506020813d60201161055b575b8161054b602093836106e3565b810103126104c75751905f6102b9565b3d915061053e565b90506060813d6060116105d0575b8161057e606093836106e3565b810103126104c75760405190610593826106c7565b80516001600160a01b03811681036104c7576105c59160409184526105ba60208201610723565b602085015201610723565b60408201525f610284565b3d9150610571565b6040513d5f823e3d90fd5b90506020843d602011610610575b816105fe602093836106e3565b810103126104c757606093519061021c565b3d91506105f1565b93506020843d602011610645575b81610633602093836106e3565b810103126104c75792519260206101d1565b3d9150610626565b90506020813d602011610677575b81610668602093836106e3565b810103126104c757515f610187565b3d915061065b565b90506020813d6020116106ab575b8161069a602093836106e3565b810103126104c7575161016b610139565b3d915061068d565b634e487b7160e01b5f52604160045260245ffd5b6060810190811067ffffffffffffffff8211176106b357604052565b90601f8019910116810190811067ffffffffffffffff8211176106b357604052565b60405190610712826106c7565b5f6040838281528260208201520152565b519065ffffffffffff821682036104c757565b908160209103126104c7575180151581036104c75790565b6003821015610391575256fea26469706673582212203f4306d3bf3c28084cf79e467f13dd3af7bfe13036c5eedde93c232e6955233664736f6c634300081b0033";
